import type { NextPage } from "next";
import Head from "next/head";
import { MongoClient, ObjectId } from "mongodb";
import MeetupDetail from "../../components/meetups/MeetupDetail";

interface Props {
  meetupData: any
}

const MeetUpDetails: NextPage<Props> = ({meetupData}) => {
  return (
    <>
      <Head>
        <title>{meetupData.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MeetupDetail
        title={meetupData.title}
        address={meetupData.address}
        image={meetupData.image}
        description={meetupData.description}
      />
    </>
  );
};

export async function getStaticPaths() {
  const client = await MongoClient.connect(
    "mongodb+srv://mrtnprzk:6w1oilWMFg0iMeTt@cluster0.coymc.mongodb.net/nextjs-summary?retryWrites=true&w=majority"
  );
  const db = client.db();

  const meetupsCollection = db.collection("meetups");

  const meetups = await meetupsCollection.find({}, { _id: 1 } as any ).toArray();

  client.close();

  return {
    fallback: 'blocking', //read more about options
    paths: meetups.map((meetup) => ({
      params: { meetupId: meetup._id.toString() },
    })),
  };
}

export async function getStaticProps(context: any) {
  const meetupId = context.params.meetupId;

  const client = await MongoClient.connect(
    "mongodb+srv://mrtnprzk:6w1oilWMFg0iMeTt@cluster0.coymc.mongodb.net/nextjs-summary?retryWrites=true&w=majority"
  );
  const db = client.db();

  const meetupsCollection = db.collection("meetups");

  const selectedMeetup = await meetupsCollection.findOne({ _id: new ObjectId(meetupId)}) as any;

  client.close();

  return {
    props: {
      meetupData: {
        id: selectedMeetup._id.toString(),
        title: selectedMeetup.title,
        address: selectedMeetup.address,
        image: selectedMeetup.image,
        description: selectedMeetup.description,
      },
    },
  };
}

export default MeetUpDetails;
